'use client';

import React, { useEffect, useState, useRef } from "react";
import { useRouter } from 'next/navigation';

import { supabase } from "@/lib/supabaseClient"; 
 
  const router = useRouter();  
  
  
  const [isLoading, setIsLoading] = useState(() => {
    // Check if we have cached auth state to avoid initial loading
    if (typeof window !== "undefined") {
      const cachedAuth = localStorage.getItem("admin_auth_state");
      if (cachedAuth === "true") {
        return false; // Skip loading if we know user is admin
      }
    }
    return true;
  });
  const [isAdmin, setIsAdmin] = useState(() => {
    // Initialize with cached state if available
    if (typeof window !== "undefined") {
      const cachedAuth = localStorage.getItem("admin_auth_state");
      return cachedAuth === "true";
    }
    return false;
  });



// 1) Auth check & auth state listener
  useEffect(() => {
    let mounted = true;
    let isInitialCheck = true;

    async function checkAdmin() {
      if (!mounted) return;

      // Only show loading on initial check, not on auth state changes
      if (isInitialCheck) {
        setIsLoading(true);
      }

      try {
        const { data: userData, error: userErr } =
          await supabase.auth.getUser();
        if (userErr) throw userErr;
        const user = userData?.user ?? null;
        if (!user) {
          if (mounted) {
            setIsAdmin(false);
            setIsLoading(false);
            router.push("/admin");
          }
          return;
        }

        const { data: profile, error: pErr } = await supabase
          .from("profiles")
          .select("is_admin")
          .eq("id", user.id)
          .single();

        if (pErr || !profile?.is_admin) {
          await supabase.auth.signOut();
          if (mounted) {
            setIsAdmin(false);
            setIsLoading(false);
            router.push("/admin");
          }
          return;
        }

        if (mounted) {
          setIsAdmin(true);
          setIsLoading(false);
          // Cache auth state to avoid loading on next visit
          if (typeof window !== "undefined") {
            localStorage.setItem("admin_auth_state", "true");
          }
        }
      } catch (err) {
        console.error("Admin auth check failed:", err);
        if (mounted) {
          setIsAdmin(false);
          setIsLoading(false);
          // Clear cached auth state
          if (typeof window !== "undefined") {
            localStorage.removeItem("admin_auth_state");
          }
          router.push("/admin");
        }
      }

      isInitialCheck = false;
    }

    checkAdmin();

    const { data: listener } = supabase.auth.onAuthStateChange(
      (event, session) => {
        if (event === "SIGNED_OUT" || !session?.user) {
          // Don't show loading for sign out
          setIsAdmin(false);
          // Clear cached auth state
          if (typeof window !== "undefined") {
            localStorage.removeItem("admin_auth_state");
          }
          router.push("/admin");
        }
        if (event === "SIGNED_IN") {
          // Don't show loading for sign in, just check silently
          checkAdmin();
        }
      }
    );

    return () => {
      mounted = false;
      if (listener) listener.subscription?.unsubscribe?.();
    };
  }, [router]);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">YÃ¼kleniyor...</p>
        </div>
      </div>
    )
  }
  
  if (!isAdmin) return null;


  // UI state for app
  //   const [route, setRoute] = useState(() => {
  //   if (typeof window !== "undefined") {
  //     return localStorage.getItem("admin_route") || "dashboard";
  //   }
  //   return "dashboard";
  // });